// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bzlq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bzlq.TargetDetail)
pub struct TargetDetail {
    // message fields
    // @@protoc_insertion_point(field:bzlq.TargetDetail.label)
    pub label: ::std::string::String,
    // @@protoc_insertion_point(field:bzlq.TargetDetail.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:bzlq.TargetDetail.is_executable)
    pub is_executable: bool,
    // @@protoc_insertion_point(field:bzlq.TargetDetail.is_test)
    pub is_test: bool,
    // special fields
    // @@protoc_insertion_point(special_field:bzlq.TargetDetail.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TargetDetail {
    fn default() -> &'a TargetDetail {
        <TargetDetail as ::protobuf::Message>::default_instance()
    }
}

impl TargetDetail {
    pub fn new() -> TargetDetail {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &TargetDetail| { &m.label },
            |m: &mut TargetDetail| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &TargetDetail| { &m.description },
            |m: &mut TargetDetail| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_executable",
            |m: &TargetDetail| { &m.is_executable },
            |m: &mut TargetDetail| { &mut m.is_executable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_test",
            |m: &TargetDetail| { &m.is_test },
            |m: &mut TargetDetail| { &mut m.is_test },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TargetDetail>(
            "TargetDetail",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TargetDetail {
    const NAME: &'static str = "TargetDetail";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.label = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                24 => {
                    self.is_executable = is.read_bool()?;
                },
                32 => {
                    self.is_test = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if self.is_executable != false {
            my_size += 1 + 1;
        }
        if self.is_test != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if self.is_executable != false {
            os.write_bool(3, self.is_executable)?;
        }
        if self.is_test != false {
            os.write_bool(4, self.is_test)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TargetDetail {
        TargetDetail::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.description.clear();
        self.is_executable = false;
        self.is_test = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TargetDetail {
        static instance: TargetDetail = TargetDetail {
            label: ::std::string::String::new(),
            description: ::std::string::String::new(),
            is_executable: false,
            is_test: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TargetDetail {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TargetDetail").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TargetDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TargetDetail {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bzlq.TargetDetails)
pub struct TargetDetails {
    // message fields
    // @@protoc_insertion_point(field:bzlq.TargetDetails.target_detail)
    pub target_detail: ::std::vec::Vec<TargetDetail>,
    // special fields
    // @@protoc_insertion_point(special_field:bzlq.TargetDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TargetDetails {
    fn default() -> &'a TargetDetails {
        <TargetDetails as ::protobuf::Message>::default_instance()
    }
}

impl TargetDetails {
    pub fn new() -> TargetDetails {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "target_detail",
            |m: &TargetDetails| { &m.target_detail },
            |m: &mut TargetDetails| { &mut m.target_detail },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TargetDetails>(
            "TargetDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TargetDetails {
    const NAME: &'static str = "TargetDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.target_detail.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.target_detail {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.target_detail {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TargetDetails {
        TargetDetails::new()
    }

    fn clear(&mut self) {
        self.target_detail.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TargetDetails {
        static instance: TargetDetails = TargetDetails {
            target_detail: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TargetDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TargetDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TargetDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TargetDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nbzlq.proto\x12\x04bzlq\"\x84\x01\n\x0cTargetDetail\x12\x14\n\x05labe\
    l\x18\x01\x20\x01(\tR\x05label\x12\x20\n\x0bdescription\x18\x02\x20\x01(\
    \tR\x0bdescription\x12#\n\ris_executable\x18\x03\x20\x01(\x08R\x0cisExec\
    utable\x12\x17\n\x07is_test\x18\x04\x20\x01(\x08R\x06isTest\"H\n\rTarget\
    Details\x127\n\rtarget_detail\x18\x01\x20\x03(\x0b2\x12.bzlq.TargetDetai\
    lR\x0ctargetDetailb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(TargetDetail::generated_message_descriptor_data());
            messages.push(TargetDetails::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
